import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_database/firebase_database.dart';

class QuizPage extends StatefulWidget {
  final String category;
  const QuizPage({super.key, required this.category});

  @override
  State<QuizPage> createState() => _QuizPageState();
}

class _QuizPageState extends State<QuizPage> {
  final user = FirebaseAuth.instance.currentUser!;
  late DatabaseReference _resultsRef;

  int currentIndex = 0;
  int correctAnswers = 0;
  int? selectedIndex;

  late List<Map<String, dynamic>> questions;

  @override
  void initState() {
    super.initState();
    _resultsRef = FirebaseDatabase.instance.ref('quiz_results/${user.uid}');
    questions = _getQuestions(widget.category);
  }

  List<Map<String, dynamic>> _getQuestions(String category) {
    switch (category) {
      case '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å':
        return _financeQuestions;
      case '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
        return _cyberQuestions;
      case '–ü—Ä–∞–≤–æ –†–æ—Å—Å–∏–∏':
        return _lawQuestions;
      default:
        return [];
    }
  }

  void _checkAnswer(int index) {

    setState(() {
      selectedIndex = index;
    });
  }

  void _nextQuestion() {
    if (selectedIndex == null) return;


    if (questions[currentIndex]['correct'] == selectedIndex) {
      correctAnswers++;
    }

    if (currentIndex < questions.length - 1) {
      setState(() {
        currentIndex++;
        selectedIndex = null;
      });
    } else {
      _showResult();
    }
  }

  Future<void> _showResult() async {
    final score = ((correctAnswers / questions.length) * 100).round();
    await _resultsRef.child(widget.category).set({
      'score': score,
      'correct': correctAnswers,
      'total': questions.length,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => AlertDialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        title: const Text('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç'),
        content: Text(
          '–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ $correctAnswers –∏–∑ ${questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: $score%',
        ),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.pop(context);
            },
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }


  IconData _getCategoryIcon() {
    switch (widget.category) {
      case '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å':
        return Icons.savings_rounded;
      case '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
        return Icons.security_rounded;
      case '–ü—Ä–∞–≤–æ –†–æ—Å—Å–∏–∏':
        return Icons.balance_rounded;
      default:
        return Icons.quiz_rounded;
    }
  }

  Color _getCategoryColor() {
    switch (widget.category) {
      case '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å':
        return Colors.green;
      case '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å':
        return Colors.blue;
      case '–ü—Ä–∞–≤–æ –†–æ—Å—Å–∏–∏':
        return Colors.teal;
      default:
        return Colors.grey;
    }
  }

  @override
  Widget build(BuildContext context) {
    final q = questions[currentIndex];
    final progress = (currentIndex + 1) / questions.length;
    final categoryColor = _getCategoryColor();
    final categoryIcon = _getCategoryIcon();

    return Scaffold(
      backgroundColor: const Color(0xFFF8FFF5),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // üîô –ù–∞–≤–∏–≥–∞—Ü–∏—è
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  IconButton(
                    icon: const Icon(Icons.arrow_back_ios_new_rounded,
                        color: Colors.black87),
                    onPressed: () => Navigator.pop(context),
                  ),
                  Text(
                    widget.category,
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w700,
                      color: Colors.black,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close_rounded, color: Colors.black54),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),

              const SizedBox(height: 6),


              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    '–í–æ–ø—Ä–æ—Å ${currentIndex + 1} –∏–∑ ${questions.length}',
                    style: const TextStyle(
                        fontWeight: FontWeight.w600, color: Colors.black87),
                  ),
                  Text(
                    '${(progress * 100).round()}%',
                    style: TextStyle(
                        fontWeight: FontWeight.w600, color: categoryColor),
                  ),
                ],
              ),
              const SizedBox(height: 6),
              ClipRRect(
                borderRadius: BorderRadius.circular(10),
                child: LinearProgressIndicator(
                  value: progress,
                  minHeight: 6,
                  backgroundColor: Colors.grey.shade300,
                  valueColor: AlwaysStoppedAnimation(categoryColor),
                ),
              ),

              const SizedBox(height: 20),


              Container(
                width: double.infinity,
                padding:
                const EdgeInsets.symmetric(vertical: 30, horizontal: 20),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.06),
                      blurRadius: 10,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    Container(
                      width: 60,
                      height: 60,
                      decoration: BoxDecoration(
                        color: categoryColor.withOpacity(0.2),
                        shape: BoxShape.circle,
                      ),
                      child: Icon(categoryIcon,
                          color: categoryColor, size: 30),
                    ),
                    const SizedBox(height: 18),
                    Text(
                      q['question'],
                      textAlign: TextAlign.center,
                      style: const TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w600,
                        color: Colors.black,
                      ),
                    ),
                  ],
                ),
              ),

              const SizedBox(height: 18),


              Expanded(
                child: ListView.builder(
                  itemCount: q['options'].length,
                  itemBuilder: (context, i) {
                    final option = q['options'][i];
                    final isSelected = selectedIndex == i;

                    Color borderColor = Colors.grey.shade300;
                    Color fillColor = Colors.white;

                    if (isSelected) {
                      borderColor = categoryColor;
                      fillColor = categoryColor.withOpacity(0.1);
                    }

                    return AnimatedContainer(
                      duration: const Duration(milliseconds: 200),
                      margin: const EdgeInsets.only(bottom: 12),
                      decoration: BoxDecoration(
                        color: fillColor,
                        borderRadius: BorderRadius.circular(14),
                        border: Border.all(color: borderColor, width: 2),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withOpacity(0.05),
                            blurRadius: 4,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: ListTile(
                        leading: Icon(
                          isSelected
                              ? Icons.radio_button_checked
                              : Icons.radio_button_off,
                          color: isSelected ? categoryColor : Colors.grey,
                        ),
                        title: Text(option,
                            style: const TextStyle(
                                fontSize: 15, color: Colors.black87)),
                        onTap: () => _checkAnswer(i),
                      ),
                    );
                  },
                ),
              ),

              const SizedBox(height: 8),


              ElevatedButton(
                onPressed: selectedIndex != null ? _nextQuestion : null,
                style: ElevatedButton.styleFrom(
                  backgroundColor: selectedIndex != null
                      ? Colors.black
                      : Colors.grey.shade400,
                  minimumSize: const Size(double.infinity, 54),
                  elevation: 6,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(14)),
                ),
                child: Text(
                  currentIndex == questions.length - 1
                      ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å'
                      : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å  ‚Üí',
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Colors.white,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
final _financeQuestions = [
  {
    'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –±—é–¥–∂–µ—Ç?',
    'options': ['–ü–ª–∞–Ω –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤', '–í–∏–¥ –∫—Ä–µ–¥–∏—Ç–∞', '–ë–∞–Ω–∫ –¥–ª—è –¥–µ—Ç–µ–π', '–°—á—ë—Ç –≤ –±–∞–Ω–∫–µ'],
    'correct': 0
  },
  {
    'question': '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –Ω–∞–∫–æ–ø–∏—Ç—å –¥–µ–Ω—å–≥–∏?',
    'options': ['–¢—Ä–∞—Ç–∏—Ç—å –≤—Å—ë —Å—Ä–∞–∑—É', '–û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–∞', '–ü—Ä–æ—Å–∏—Ç—å —É –¥—Ä—É–∑–µ–π', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã'],
    'correct': 1
  },
  {
    'question': '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞—Ç–∞ –±–∞–Ω–∫—É –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞?',
    'options': ['–ü—Ä–æ—Ü–µ–Ω—Ç', '–ë–æ–Ω—É—Å', '–ù–∞–ª–æ–≥', '–ü–æ–¥–∞—Ä–æ–∫'],
    'correct': 0
  },
  {
    'question': '–ß—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–Ω–µ–≥?',
    'options': ['–ü–æ–¥ –ø–æ–¥—É—à–∫–æ–π', '–í –±–∞–Ω–∫–µ', '–í –∫–∞—Ä–º–∞–Ω–µ', '–£ –¥—Ä—É–≥–∞'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏?',
    'options': ['–ü–æ–∫—É–ø–∫–∞ –∏–≥—Ä—É—à–µ–∫', '–í–ª–æ–∂–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ —Å —Ü–µ–ª—å—é –ø—Ä–∏–±—ã–ª–∏', '–ü–æ–¥–∞—Ä–∫–∏ –¥—Ä—É–∑—å—è–º', '–¢—Ä–∞—Ç—ã –Ω–∞ –µ–¥—É'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ –∑–Ω–∞—á–∏—Ç "–¥–æ—Ö–æ–¥"?',
    'options': ['–î–µ–Ω—å–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å', '–¢–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', '–î–æ–ª–≥', '–ö—Ä–µ–¥–∏—Ç'],
    'correct': 0
  },
  {
    'question': '–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–µ–¥–∏—Ç?',
    'options': ['–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç –±–∞–Ω–∫–∞', '–î–µ–Ω—å–≥–∏, –≤–∑—è—Ç—ã–µ –≤–∑–∞–π–º—ã –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç—ã', '–î–æ—Ö–æ–¥', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è'],
    'correct': 1
  },
  {
    'question': '–ö–∞–∫–æ–π –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å?',
    'options': ['–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫', '–ò–º–ø—É–ª—å—Å–∏–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞', '–ü–æ–∫—É–ø–∫–∞ –ª–∏—à–Ω–µ–≥–æ'],
    'correct': 0
  },
  {
    'question': '–ö—Ç–æ —Ç–∞–∫–æ–π –≤–∫–ª–∞–¥—á–∏–∫?',
    'options': ['–¢–æ—Ç, –∫—Ç–æ –±–µ—Ä—ë—Ç –∫—Ä–µ–¥–∏—Ç', '–¢–æ—Ç, –∫—Ç–æ –∫–ª–∞–¥—ë—Ç –¥–µ–Ω—å–≥–∏ –≤ –±–∞–Ω–∫', '–†–∞–±–æ—Ç–Ω–∏–∫ –±–∞–Ω–∫–∞', '–ü—Ä–æ–¥–∞–≤–µ—Ü'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—Ä–ø–ª–∞—Ç—ã?',
    'options': ['–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –≤—Å—ë', '–ß–∞—Å—Ç—å –æ—Ç–ª–æ–∂–∏—Ç—å –∏ —á–∞—Å—Ç—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å', '–û—Ç–¥–∞—Ç—å –¥—Ä—É–∑—å—è–º', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å'],
    'correct': 1
  },
];

final _cyberQuestions = [
  {
    'question': '–ß—Ç–æ –Ω–µ–ª—å–∑—è —Å–æ–æ–±—â–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?',
    'options': ['–ò–º—è', '–í–æ–∑—Ä–∞—Å—Ç', '–ü–∞—Ä–æ–ª—å –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã', '–õ—é–±–∏–º—ã–π —Ü–≤–µ—Ç'],
    'correct': 2
  },
  {
    'question': '–§–∏—à–∏–Ω–≥ ‚Äî —ç—Ç–æ...',
    'options': ['–ò–≥—Ä–∞', '–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ —Å –ø–æ–¥–¥–µ–ª—å–Ω—ã–º–∏ –ø–∏—Å—å–º–∞–º–∏', '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', '–ó–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö'],
    'correct': 1
  },
  {
    'question': '–ö–∞–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∏—Ä—É—Å–Ω–æ–µ –ø–∏—Å—å–º–æ?',
    'options': ['–û—à–∏–±–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ, —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—å–±—ã —á—Ç–æ-—Ç–æ —Å–∫–∞—á–∞—Ç—å', '–û—Ç –¥—Ä—É–≥–∞', '–° –∞–¥—Ä–µ—Å–∞ –±–∞–Ω–∫–∞', '–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞'],
    'correct': 0
  },
  {
    'question': '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π?',
    'options': ['–û—Ç–∫—Ä—ã—Ç—å –µ—ë', '–ü–µ—Ä–µ—Å–ª–∞—Ç—å –¥—Ä—É–≥—É', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'],
    'correct': 2
  },
  {
    'question': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å ‚Äî —ç—Ç–æ...',
    'options': ['123456', 'qwerty', 'Katya2025!', 'parol'],
    'correct': 2
  },
  {
    'question': '–ù—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∏—Ç—å—Å—è –ª–∏—á–Ω—ã–º–∏ —Ñ–æ—Ç–æ —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏?',
    'options': ['–î–∞', '–ù–µ—Ç', '–ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –≤–µ–∂–ª–∏–≤–æ', '–ï—Å–ª–∏ –æ–±–µ—â–∞—é—Ç –ø–æ–¥–∞—Ä–æ–∫'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —Ç–µ–±–µ –ø–∏—à—É—Ç —Å —É–≥—Ä–æ–∑–∞–º–∏?',
    'options': ['–û—Ç–≤–µ—Ç–∏—Ç—å', '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', '–°–∫–∞–∑–∞—Ç—å –≤–∑—Ä–æ—Å–ª—ã–º –∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å'],
    'correct': 2
  },
  {
    'question': '–ú–æ–∂–Ω–æ –ª–∏ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∞–π—Ç—ã?',
    'options': ['–î–∞', '–ù–µ—Ç', '–ò–Ω–æ–≥–¥–∞', '–¢–æ–ª—å–∫–æ –¥–Ω—ë–º'],
    'correct': 1
  },
  {
    'question': '–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω –∞–Ω—Ç–∏–≤–∏—Ä—É—Å?',
    'options': ['–î–ª—è –∏–≥—Ä', '–î–ª—è –∑–∞—â–∏—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º', '–î–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞', '–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?',
    'options': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–∑—ã–≤—ã –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', '–°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å', '–û—Ç–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É'],
    'correct': 0
  },
];

final _lawQuestions = [
  {
    'question': '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§ ‚Äî —ç—Ç–æ...',
    'options': ['–ó–∞–∫–æ–Ω –æ –ø–æ–≥–æ–¥–µ', '–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–∫–æ–Ω –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞', '–°–±–æ—Ä–Ω–∏–∫ —Ä–∞—Å—Å–∫–∞–∑–æ–≤', '–î–æ–∫—É–º–µ–Ω—Ç –æ –Ω–∞–ª–æ–≥–∞—Ö'],
    'correct': 1
  },
  {
    'question': '–° –∫–∞–∫–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?',
    'options': ['6 –ª–µ—Ç', '14 –ª–µ—Ç', '16 –ª–µ—Ç', '18 –ª–µ—Ç'],
    'correct': 2
  },
  {
    'question': '–ö—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –ø—Ä–∞–≤–∞ –≥—Ä–∞–∂–¥–∞–Ω?',
    'options': ['–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ü—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞ –∏ —Å—É–¥', '–ü–æ–ª–∏—Ü–∏—è –∏ –ú–ß–°', '–°–æ—Å–µ–¥–∏'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –≤ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö?',
    'options': ['–ü–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º', '–°–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö', '–ù–∞—Ä—É—à–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏ –º—É—Å–æ—Ä–∏—Ç—å', '–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É'],
    'correct': 2
  },
  {
    'question': '–ö–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å?',
    'options': ['–ü–∞—Å–ø–æ—Ä—Ç', '–ë–ª–æ–∫–Ω–æ—Ç', '–î–Ω–µ–≤–Ω–∏–∫', '–¢–µ–ª–µ—Ñ–æ–Ω'],
    'correct': 0
  },
  {
    'question': '–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å"?',
    'options': ['–¢–æ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–µ –¥–µ–ª–∞—Ç—å', '–¢–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ –∑–∞–∫–æ–Ω—É', '–ò–≥—Ä–∞', '–ñ–µ–ª–∞–Ω–∏–µ'],
    'correct': 1
  },
  {
    'question': '–ö—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?',
    'options': ['–¢–æ–ª—å–∫–æ –≤–∑—Ä–æ—Å–ª—ã–µ', '–í—Å–µ –≥—Ä–∞–∂–¥–∞–Ω–µ –†–æ—Å—Å–∏–∏', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω—Ü—ã', '–¢–æ–ª—å–∫–æ –±–æ–≥–∞—Ç—ã–µ'],
    'correct': 1
  },
  {
    'question': '–ß—Ç–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§?',
    'options': ['–¢—Ä—É–¥', '–û—Ç–¥—ã—Ö', '–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏—é –∏ –Ω–∞—Å–∏–ª–∏–µ', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
    'correct': 2
  },
  {
    'question': '–ö–∞–∫ –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω –º–æ–∂–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ —Å—Ç—Ä–∞–Ω—ã?',
    'options': ['–í—ã–±–∏—Ä–∞—Ç—å –≤–ª–∞—Å—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∞—Ö', '–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É', '–ù–µ —Ä–∞–±–æ—Ç–∞—Ç—å', '–ù–∞—Ä—É—à–∞—Ç—å –∑–∞–∫–æ–Ω—ã'],
    'correct': 0
  },
  {
    'question': '–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–∞—Ä—É—à–µ–Ω—ã —Ç–≤–æ–∏ –ø—Ä–∞–≤–∞?',
    'options': ['–ù–∏—á–µ–≥–æ', '–ñ–∞–ª–æ–≤–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ—Ä–≥–∞–Ω—ã', '–ó–ª–∏—Ç—å—Å—è', '–ú–æ–ª—á–∞—Ç—å'],
    'correct': 1
  },
];
